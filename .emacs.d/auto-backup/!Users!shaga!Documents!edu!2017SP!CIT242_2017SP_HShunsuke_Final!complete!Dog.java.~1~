import java.text.NumberFormat;

public class Dog {
    private String code;
    private String id;
    private String name;
    private int size;
    private double weight;
    private char sex;

    public Dog() {
        this("", "", "", 0, 0, ' ');
    }

    public Dog(String code, String id, String name,
            int size, double weight, char sex) {
        setCode(code);
        setId(id);
        setName(name);
        setSize(size);
        setWeight(weight);
        setSex(sex);
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getCode() {
        return code;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setSize(int size) {
        this.size = size;
    }

    public int getSize() {
        return size;
    }

    public String getSizeString() {
        String sizeString = Integer.toString(size);
        return sizeString;

    }

    public void setWeight(double weight) {
        this.weight = weight;
    }

    public double getWeight() {
        return weight;
    }

    public String getFormattedWeight() {
        NumberFormat currency = NumberFormat.getCurrencyInstance();
        return currency.format(weight);
    }

    public void setSex(char sex) {
        this.sex = sex;
    }

    public char getSex() {
        return sex;
    }

    public boolean equals(Object object) {
        if (object instanceof Dog) {
            Dog dog2 = (Dog) object;

            if (
                code.equals(dog2.getCode()) &&
                id.equals(dog2.getId()) &&
                name.equals(dog2.getName()) &&
                size == dog2.getSize() &&
                weight == dog2.getWeight() &&
                sex == dog2.getSex()) {
                return true;
            }
        }
        return false;
    }

    // This is kind of an ugly way of circumventing the implicit call to this
    // class's toString() method by the DefaultListModel's addElement() method.
    public String toStringAllFields() {
        StringBuilder sb = new StringBuilder(100);
        sb.append("code: ").append(code).append(" \n")
            .append("name: ").append(name).append(" \n")
            .append("size: ").append(size).append(" \n")
            .append("weight: ").append(getFormattedWeight()).append(" \n")
            .append("sex: ").append(sex).append("\n");

        return sb.toString();
    }

    @Override
    public String toString() {
        return name;
    }
}
