import java.util.*;
import java.io.*;
import javax.xml.stream.*;  // StAX API

public class DogXMLFile implements DogDAO {
    private String dogsFilename = "dogs.xml";
    private File dogsFile = null;

    public DogXMLFile() {
        dogsFile = new File(dogsFilename);
    }

    private void checkFile() throws IOException {
        if (!dogsFile.exists()) {
            dogsFile.createNewFile();
        }
    }

    private boolean saveDogs(ArrayList<Dog> dogs) {
        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();

        try {
            this.checkFile();

            FileWriter fileWriter = new FileWriter(dogsFilename);
            XMLStreamWriter writer = outputFactory.createXMLStreamWriter(fileWriter);

            writer.writeStartDocument("1.0");
            writer.writeStartElement("Dogs");

            for (Dog p : dogs) {
                writer.writeStartElement("Dog");
                writer.writeAttribute("Code", p.getCode());

                writer.writeStartElement("ID");
                writer.writeCharacters(p.getId());
                writer.writeEndElement();

                writer.writeStartElement("Description");
                writer.writeCharacters(p.getDescription());
                writer.writeEndElement();

                writer.writeStartElement("Amount");
                int amount = (int) p.getAmount();
                writer.writeCharacters(Integer.toString(amount));
                writer.writeEndElement();

                writer.writeStartElement("Price");
                double price = p.getPrice();
                writer.writeCharacters(Double.toString(price));
                writer.writeEndElement();

                writer.writeStartElement("Discount");
                char discount = p.getDiscount();
                writer.writeCharacters(Character.toString(discount));
                writer.writeEndElement();

                writer.writeEndElement();
            }
            writer.writeEndElement();
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        } catch (XMLStreamException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public ArrayList<Dog> getDogs() {
        ArrayList<Dog> dogs = new ArrayList<Dog>();
        Dog p = null;
        XMLInputFactory inputFactory = XMLInputFactory.newInstance();

        try {
            this.checkFile();

            FileReader fileReader = new FileReader(dogsFilename);
            XMLStreamReader reader = inputFactory.createXMLStreamReader(fileReader);

            while (reader.hasNext()) {
                int eventType = reader.getEventType();

                switch (eventType) {
                case XMLStreamConstants.START_ELEMENT:
                    String elementName = reader.getLocalName();

                    if (elementName.equals("Dog")) {
                        p = new Dog();
                        String code = reader.getAttributeValue(0);
                        p.setCode(code);
                    }
                    if (elementName.equals("Id")) {
                        String id = reader.getElementText();
                        p.setId(id);
                    }
                    if (elementName.equals("Description")) {
                        String description = reader.getElementText();
                        p.setDescription(description);
                    }
                    if (elementName.equals("Amount")) {
                        String amountString = reader.getElementText();
                        int amount = Integer.parseInt(amountString);
                        p.setAmount(amount);
                    }
                    if (elementName.equals("Price")) {
                        String priceString = reader.getElementText();
                        double price = Double.parseDouble(priceString);
                        p.setPrice(price);
                    }
                    if (elementName.equals("Discount")) {
                        String discountString = reader.getElementText();
                        char discount = discountString.charAt(0);
                        p.setDiscount(discount);
                    }
                    break;
                case XMLStreamConstants.END_ELEMENT:
                    elementName = reader.getLocalName();
                    if (elementName.equals("Dog")) {
                        dogs.add(p);
                    }
                    break;
                default:
                    break;
                }
                reader.next();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } catch (XMLStreamException e) {
            e.printStackTrace();
            return null;
        }
        return dogs;
    }

    public Dog getDog(String code) {
        ArrayList<Dog> dogs = this.getDogs();

        for (Dog p : dogs) {
            if (p.getCode().equals(code)) {
                return p;
            }
        }
        return null;
    }

    public boolean addDog(Dog p) {
        ArrayList<Dog> dogs = this.getDogs();
        dogs.add(p);

        return this.saveDogs(dogs);
    }

    public boolean deleteDog(Dog p) {
        ArrayList<Dog> dogs = this.getDogs();
        dogs.remove(p);

        return this.saveDogs(dogs);
    }

    public boolean updateDog(Dog newDog) {
        ArrayList<Dog> dogs = this.getDogs();

        // get the old dog and remove it
        Dog oldDog = this.getDog(newDog.getCode());
        int i = dogs.indexOf(oldDog);
        dogs.remove(i);

        // add the updated dog
        dogs.add(i, newDog);

        return this.saveDogs(dogs);
    }
}
